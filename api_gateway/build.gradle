plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.rahul'
version = ''

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

ext {
	ver = [
			log4j: '2.19.0'
	]
}

jar{
	archiveClassifier=''
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
}


dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway:4.1.5'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation "log4j:log4j:1.2.17"
	implementation "org.apache.logging.log4j:log4j-api:2.19.0"
	implementation "org.apache.logging.log4j:log4j-core:2.19.0"
	implementation "org.springframework.boot:spring-boot-starter-log4j2"
	implementation 'org.apache.commons:commons-lang3:3.15.0'
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

def outputRoot = "${rootDir}/dist"
def targetDir = "${outputRoot}/target"

task deleteOutputTarget(type: Delete) {
	doFirst {
		println("#### DELETE DIR - ${targetDir}")
		delete "${targetDir}/bin"
	}
}

task copyJars(type: Copy) { task ->
	// This configures the copy and execute only on any changes
	dependsOn deleteOutputTarget
	dependsOn bootJar
	println("#### COPY JARS - ${task.project.name} to ${targetDir}/bin")
	from jar
	into project.file("${targetDir}/bin")

	doFirst {
		// These print statements are printed only when task is executed
		println("#### COPY JARS - ${task.project.name} to ${targetDir}/bin")
	}
}

task copyDeps(type: Copy) { task ->
	// This configures the copy and execute only on any changes
	from configurations.runtimeClasspath
	into project.file("${targetDir}/lib")

	doFirst {
		// These print statements are printed only when task is executed
		println("#### COPY LIBS - ${task.project.name} to ${targetDir}/lib")
	}
}

build.dependsOn(copyJars, copyDeps)

task copyScriptsAndConfig(type: Copy) {
	// This configures the copy and execute only on any changes
	from "${outputRoot}"
	into "${targetDir}"
	exclude("target/**")
	doFirst {
		// These print statements are printed only when task is executed
		println("#### COPYING SCRIPTS AND CONFIG")
		println("FROM - ${outputRoot}")
		println("TO - ${targetDir}")
		println("####")
	}
}

build.dependsOn(copyScriptsAndConfig)

def mainClass = "com.rahul.api_gateway.ApiGatewayApplication"

def classpath = ' ../conf/configs/ ../conf/configs/commons/lang/ '
// This appends the dependencies to manifest classpath
classpath += configurations.runtimeClasspath.collect { '../lib/' + it.getName() }.join(' ')

jar {
	manifest {
		attributes(
				"Main-Class": mainClass,
				"Class-Path": classpath  // Class-Path set to include lib directory
		)
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
